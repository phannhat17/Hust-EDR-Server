syntax = "proto3";

package edr;

option go_package = "agent/proto";

// EDR agent service
service EDRService {
  // Register agent with the server
  rpc RegisterAgent(RegisterRequest) returns (RegisterResponse);
  
  // Update agent status
  rpc UpdateStatus(StatusRequest) returns (StatusResponse);
  
  // Bidirectional streaming for agent-server communication
  rpc CommandStream(stream CommandMessage) returns (stream CommandMessage);
  
  // Report command execution result (keeping for backward compatibility)
  rpc ReportCommandResult(CommandResult) returns (CommandAck);
  
  // Send command to agent (server-initiated)
  rpc SendCommand(SendCommandRequest) returns (SendCommandResponse);
  
  // List all agents
  rpc ListAgents(ListAgentsRequest) returns (ListAgentsResponse);
  
  // Get IOCs from server
  rpc GetIOCs(IOCRequest) returns (IOCResponse);
  
  // Report IOC match from agent
  rpc ReportIOCMatch(IOCMatchReport) returns (IOCMatchAck);
}

// Command types
enum CommandType {
  UNKNOWN = 0;
  DELETE_FILE = 1;
  KILL_PROCESS = 2;
  KILL_PROCESS_TREE = 3;
  BLOCK_IP = 4;
  BLOCK_URL = 5;
  NETWORK_ISOLATE = 6;
  NETWORK_RESTORE = 7;
  UPDATE_IOCS = 8;
}

// IOC types
enum IOCType {
  IOC_UNKNOWN = 0;
  IOC_IP = 1;
  IOC_HASH = 2;
  IOC_URL = 3;
}

// Message type for bidirectional streaming
enum MessageType {
  AGENT_HELLO = 0;
  AGENT_STATUS = 1;
  SERVER_COMMAND = 2;
  COMMAND_RESULT = 3;
}

// Unified message for bidirectional streaming
message CommandMessage {
  string agent_id = 1;
  int64 timestamp = 2;
  MessageType message_type = 3;
  
  // Fields for specific message types
  oneof payload {
    AgentHello hello = 4;
    StatusRequest status = 5;
    Command command = 6;
    CommandResult result = 7;
  }
}

// Agent hello message for stream initialization
message AgentHello {
  string agent_id = 1;
  int64 timestamp = 2;
}

// Agent registration request
message RegisterRequest {
  string agent_id = 1;
  string hostname = 2;
  string ip_address = 3;
  string mac_address = 4;
  string username = 5;
  string os_version = 6;
  string agent_version = 7;
  int64 registration_time = 8;
}

// Agent registration response
message RegisterResponse {
  string server_message = 1;
  bool success = 2;
  string assigned_id = 3;
  int64 server_time = 4;
}

// Status update request
message StatusRequest {
  string agent_id = 1;
  int64 timestamp = 2;
  string status = 3;
  SystemMetrics system_metrics = 4;
}

// System metrics
message SystemMetrics {
  double cpu_usage = 1;
  double memory_usage = 2;
  int64 uptime = 3;
}

// Status update response
message StatusResponse {
  string server_message = 1;
  bool acknowledged = 2;
  int64 server_time = 3;
}

// Command to execute
message Command {
  string command_id = 1;
  string agent_id = 2;
  int64 timestamp = 3;
  CommandType type = 4;
  map<string, string> params = 5;
  int32 priority = 6;
  int32 timeout = 7;
}

// Command execution result
message CommandResult {
  string command_id = 1;
  string agent_id = 2;
  bool success = 3;
  string message = 4;
  int64 execution_time = 5;
  int64 duration_ms = 6;
}

// Command acknowledgment
message CommandAck {
  string command_id = 1;
  bool received = 2;
  string message = 3;
}

// Send command request
message SendCommandRequest {
  Command command = 1;
}

// Send command response
message SendCommandResponse {
  bool success = 1;
  string message = 2;
}

// List agents request
message ListAgentsRequest {
  // Empty for now, may add filters later
}

// Agent information
message AgentInfo {
  string agent_id = 1;
  string hostname = 2;
  string ip_address = 3;
  string mac_address = 4;
  string username = 5;
  string os_version = 6;
  string agent_version = 7;
  int64 registration_time = 8;
}

// List agents response
message ListAgentsResponse {
  repeated AgentInfo agents = 1;
}

// IOC request from agent
message IOCRequest {
  string agent_id = 1;
  int64 current_version = 2; // Current IOC version on agent
  repeated IOCType requested_types = 3; // Types of IOCs being requested
}

// IOC data
message IOCData {
  string value = 1; // The IOC value (IP, hash, etc.)
  string description = 2;
  string severity = 3; // low, medium, high, critical
  map<string, string> metadata = 4; // Additional metadata
}

// IOC response from server
message IOCResponse {
  bool update_available = 1;
  int64 version = 2;
  int64 timestamp = 3;
  map<string, IOCData> ip_addresses = 4;
  map<string, IOCData> file_hashes = 5;
  map<string, IOCData> urls = 6;
}

// IOC match report from agent
message IOCMatchReport {
  string report_id = 1;
  string agent_id = 2;
  int64 timestamp = 3;
  IOCType type = 4;
  string ioc_value = 5;
  string matched_value = 6; // The actual value that matched (useful for partial matches)
  string context = 7; // Additional context about the match
  string severity = 8;
  CommandType action_taken = 9; // Action taken by agent, if any
  bool action_success = 10;
  string action_message = 11;
}

// IOC match acknowledgment
message IOCMatchAck {
  string report_id = 1;
  bool received = 2;
  string message = 3;
  bool perform_additional_action = 4; // Server can request additional action
  CommandType additional_action = 5; // Additional action to take
  map<string, string> action_params = 6; // Parameters for additional action
} 